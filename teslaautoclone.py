# -*- coding: utf-8 -*-
"""TeslaAutoClone

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/mannangolchha/teslaautoclone.3d419802-236b-4a09-a302-bac5ebd0df28.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20250804/auto/storage/goog4_request%26X-Goog-Date%3D20250804T160125Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3Dc00c3bafa45b57b5a1d0185b967bd2e1ed4617b5cc9aa5840227bc37bf1b8f6f8c9aaee7a5c8724d1d93baf20bfa78adea2c51ae4d0b258b681346bb239bef98664a96a5a7701812eb90431c0d0d2e23425d04db79b3a03622a2ba6e8fb0db66f110e32465f8f7cbac0b678690ea94ad135a6842d9b096250def0009c176f3e21c4126eef2349370af93b7c4b20d00cc80fae2a653a56f5ce8591920ac00d5ca9b815cfb7cff05a5af067a62455a9eabb46b4938e53f668de4cd21789d5c74ad74ca441297c5c93f59b5f992a4238d5bc457d05d893137049153a97fac4ce0e299725ca1fb49bdb43ba7d25dfb454f5a187ebc1d90eb15fca291aa7ade92f53c
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.
import kagglehub
klemenko_kitti_dataset_path = kagglehub.dataset_download('klemenko/kitti-dataset')
shreydan_kitti_dataset_yolo_format_path = kagglehub.dataset_download('shreydan/kitti-dataset-yolo-format')

print('Data source import complete.')

import os
for dirname, _, filenames in os.walk('/kaggle/input'):
    for filename in filenames:
        print(os.path.join(dirname, filename))

!pip install ultralytics -q

!pip install -U ray[tune] -q

# Commented out IPython magic to ensure Python compatibility.
# %env WANDB_DISABLED = True

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import json
from ultralytics import YOLO
import shutil
from PIL import Image
from sklearn.model_selection import train_test_split
from pathlib import Path
from tqdm.auto import tqdm

import kagglehub

# Download latest version
path = kagglehub.dataset_download("shreydan/kitti-dataset-yolo-format")

print("Path to dataset files:", path)

img_path = Path('/kaggle/input/kitti-dataset/data_object_image_2/training/image_2')
label_path = Path('/kaggle/input/kitti-dataset-yolo-format/labels')
with open('/kaggle/input/kitti-dataset-yolo-format/classes.json', 'r') as f:
    classes = json.load(f)
classes

ims = sorted(list(img_path.glob('*')))
labels = sorted(list(label_path.glob('*')))
pairs = list(zip(ims, labels))
pairs[:2]

train, test = train_test_split(pairs, test_size = 0.1, shuffle = True)
len(train), len(test)

train_path = Path('train').resolve()
train_path.mkdir(exist_ok = True)
test_path = Path('test').resolve()
test_path.mkdir(exist_ok = True)

for im, lb in tqdm(train) :
    im_path = train_path / im.name
    lb_path = train_path / lb.name
    shutil.copy(im, im_path)
    shutil.copy(lb, lb_path)

for im, lb in tqdm(test) :
    im_path = test_path / im.name
    lb_path = test_path / lb.name
    shutil.copy(im, im_path)
    shutil.copy(lb, lb_path)

# YAML file
yaml_file = 'names:\n'
yaml_file += '\n'.join(f'- {c}' for c in classes.keys())
yaml_file += f'\nnc: {len(classes)}'
yaml_file += f'\ntrain: {str(train_path)}'
yaml_file += f'\nval: {str(test_path)}'
with open('kitti.yaml', 'w') as f:
    f.write(yaml_file)

!cat kitti.yaml

# Model
model = YOLO('yolov8n.yaml') # if want to train yolo model architecture from scratch
model = YOLO('yolov8n.pt') # already pretrained on coco dataset
# model = YOLO('yolov8n.yaml').load('yolov8n.pt')     # Modify architecture (e.g., change nc in YAML) but retain pretrained backbone

training = model.train(
    data = '/kaggle/working/kitti.yaml',
    epochs = 10,
    patience = 3,
    mixup = 0.1,
    project = 'yolov8n-kitti',
    device = 0
)

valid_res = model.val()

# Results
plt.figure(figsize = (20,20))
plt.imshow(Image.open('/kaggle/working/yolov8n-kitti/train2/results.png'))
plt.axis('off')
plt.show()

# Results
plt.figure(figsize = (20, 15))
plt.imshow(Image.open('/kaggle/working/yolov8n-kitti/train2/confusion_matrix.png'), cmap = 'Blues')
plt.axis('off')
plt.show()

predict = model.predict([test[i][0] for i in np.random.randint(0, len(test), (15,))], save = True)

test_im_path = list(Path('/kaggle/working/yolov8n-kitti/train23').glob('*'))

fig, ax = plt.subplots(15, 1, figsize = (25,70))
for i in range(len(test_im_path)) :
    ax[i].imshow(Image.open(test_im_path[i]))
    ax[i].axis('off')
plt.tight_layout()
plt.show()